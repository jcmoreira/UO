const lootPriority = {};


lootPriority['0x186C'] = -10000; //Wisdom, Luxury, Haste Magic Gems
lootPriority['0x186D'] = -10000; //Hunger, Soul, Peace Magic Gems
lootPriority['0x186E'] = -10000; //Nature, Blood Magic Gems
lootPriority['0x175D'] = -9999; //Pano
lootPriority['0x1F31'] = -500; //PS
lootPriority['0x14EB'] = -150; //Mapa
lootPriority['0x0EED'] = -100; //Gold

function priorityComparator(a,b) {
   
   var aPriority = 99999;
   var bPriority = 99999;

   var aObject = Orion.FindObject(a);
   if (aObject != null) {
      var aType = aObject.Graphic();
      aPriority = aType in lootPriority ? lootPriority[aType] : 0;
   }
   var bObject = Orion.FindObject(b);
   if (bObject != null) {
      var bType = bObject.Graphic();
      bPriority = bType in lootPriority ? lootPriority[bType] : 0;
   }

   return aPriority - bPriority;
}



function EmptyContainer()
{
    Orion.Print('Select container to empty');
    Orion.AddObject('moveFromContainer');
    while (Orion.HaveTarget()) {
        Orion.Wait(20);
    }

    Orion.Print('Select container to receive items');
    Orion.AddObject('moveToContainer');
    while (Orion.HaveTarget()) {
        Orion.Wait(20);
    }

    var list = Orion.FindType('-1', '-1', 'moveFromContainer');

    while (list.length > 0){
         Orion.MoveItem(list[0], 0, 'moveToContainer');
         Orion.Wait('moveitemdelay');
         list = Orion.FindType('-1', '-1', 'moveFromContainer');
    }

}

function SetOrGetContainer(containerName, containerDescription)
{
   var container = Orion.FindObject(containerName);

   if (container == null || !container.Exists()) {
      Orion.Print('Select container: ' + containerDescription);
      Orion.AddObject(containerName);
      while(Orion.HaveTarget()) {
            Orion.Wait(20);
      }
      container = Orion.FindObject(containerName);
   }

   return container;
}

function OrganizeItemsFromLootBarrel(){

   Orion.ResetIgnoreList();
   Orion.IgnoreReset();

   var lootBarrel = SetOrGetContainer('lootContainer', 'Unorganized Loot');
   Orion.OpenContainer(lootBarrel.Serial());

   var bagsContainer = SetOrGetContainer('bagsContainer', 'Bags Container');
   Orion.OpenContainer(bagsContainer.Serial());

   var alchemyContainer = SetOrGetContainer('alchemyContainer', 'Alchemy Items');
   Orion.OpenContainer(alchemyContainer.Serial());
   var reagentsContainer = SetOrGetContainer('reagentsContainer', 'Reagents Container');
   Orion.OpenContainer(reagentsContainer.Serial());

   var inscriptionContainer = SetOrGetContainer('inscriptionContainer', 'Inscription Items');
   Orion.OpenContainer(inscriptionContainer.Serial());
   var firstCircleScrollsContainer = SetOrGetContainer('firstCircleScrollsContainer', 'First Circle Scrolls Container');
   Orion.OpenContainer(firstCircleScrollsContainer.Serial());
   var secondCircleScrollsContainer = SetOrGetContainer('secondCircleScrollsContainer', 'Second Circle Scrolls Container');
   Orion.OpenContainer(secondCircleScrollsContainer.Serial());
   var thirdCircleScrollsContainer = SetOrGetContainer('thirdCircleScrollsContainer', 'Third Circle Scrolls Container');
   Orion.OpenContainer(thirdCircleScrollsContainer.Serial());
   var fourthCircleScrollsContainer = SetOrGetContainer('fourthCircleScrollsContainer', 'Fourth Circle Scrolls Container');
   Orion.OpenContainer(fourthCircleScrollsContainer.Serial());
   var fifthCircleScrollsContainer = SetOrGetContainer('fifthCircleScrollsContainer', 'Fifth Circle Scrolls Container');
   Orion.OpenContainer(fifthCircleScrollsContainer.Serial());
   var sixthCircleScrollsContainer = SetOrGetContainer('sixthCircleScrollsContainer', 'Sixth Circle Scrolls Container');
   Orion.OpenContainer(sixthCircleScrollsContainer.Serial());
   var seventhCircleScrollsContainer = SetOrGetContainer('seventhCircleScrollsContainer', 'Seventh Circle Scrolls Container');
   Orion.OpenContainer(firstCircleScrollsContainer.Serial());
   var eigthCircleScrollsContainer = SetOrGetContainer('eigthCircleScrollsContainer', 'Eigth Circle Scrolls Container');
   Orion.OpenContainer(eigthCircleScrollsContainer.Serial());
   var powerScrollsContainer = SetOrGetContainer('powerScrollsContainer', 'Power Scrolls Container');
   Orion.OpenContainer(powerScrollsContainer.Serial());
   
   var magicWeaponsContainer = SetOrGetContainer('magicWeaponsContainer', 'Magic Weapons Container');
   Orion.OpenContainer(magicWeaponsContainer.Serial());
   var ruinWeaponsContainer = SetOrGetContainer('ruinWeaponsContainer', 'Ruin Weapons Container');
   Orion.OpenContainer(ruinWeaponsContainer.Serial());
   var mightWeaponsContainer = SetOrGetContainer('mightWeaponsContainer', 'Might Weapons Container');
   Orion.OpenContainer(mightWeaponsContainer.Serial());
   var forceWeaponsContainer = SetOrGetContainer('forceWeaponsContainer', 'Force Weapons Container');
   Orion.OpenContainer(forceWeaponsContainer.Serial());
   var powerWeaponsContainer = SetOrGetContainer('powerWeaponsContainer', 'Power Weapons Container');
   Orion.OpenContainer(powerWeaponsContainer.Serial());
   var vanquishWeaponsContainer = SetOrGetContainer('vanquishWeaponsContainer', 'Vanquish Weapons Container');
   Orion.OpenContainer(vanquishWeaponsContainer.Serial());
   var silverWeaponsContainer = SetOrGetContainer('silverWeaponsContainer', 'Silver Weapons Container');
   Orion.OpenContainer(silverWeaponsContainer.Serial());
   var bloodWeaponsContainer = SetOrGetContainer('bloodWeaponsContainer', 'Blood Weapons Container');
   Orion.OpenContainer(bloodWeaponsContainer.Serial());
   
   var mapsContainer = SetOrGetContainer('mapsContainer', 'Maps Container');
   Orion.OpenContainer(mapsContainer.Serial());
   var level1MapsContainer = SetOrGetContainer('level1MapsContainer', 'Level 1 Maps Container');
   Orion.OpenContainer(level1MapsContainer.Serial());
   var level2MapsContainer = SetOrGetContainer('level2MapsContainer', 'Level 2 Maps Container');
   Orion.OpenContainer(level2MapsContainer.Serial());
   var level3MapsContainer = SetOrGetContainer('level3MapsContainer', 'Level 3 Maps Container');
   Orion.OpenContainer(level3MapsContainer.Serial());   
   var level4MapsContainer = SetOrGetContainer('level4MapsContainer', 'Level 4 Maps Container');
   Orion.OpenContainer(level4MapsContainer.Serial());
   var level5MapsContainer = SetOrGetContainer('level5MapsContainer', 'Level 5 Maps Container');
   Orion.OpenContainer(level5MapsContainer.Serial());

   var regs = '0x0F78|0x0F79|0x0F7A|0x0F7B|0x0F7C|0x0F82|0x0F84|0x0F85|0x0F86|0x0F87|0x0F88|0x0F89|0x0F8C|0x0F8D|0x0F8E|0x0F90|0x0F91';
   var bags = '0x0E75|0x0E76';

   var bagList = Orion.FindType(bags, '-1', lootBarrel.Serial());
   Orion.Print(bagList.length + ' bags found.');

   for (var i = 0; i < bagList.length; i++){
      Orion.OpenContainer(bagList[i]);
      Orion.Print('Emptying bag ' + (i + 1));
	
      var itemList = Orion.FindType('-1', '-1', bagList[i]);
      Orion.Print(itemList.length + ' items found on bag ' + (i + 1));
     
      while (itemList.length > 0) {
         Orion.MoveItem(itemList[0], 0, 'lootContainer');
         Orion.Wait('moveitemdelay');
         itemList = Orion.FindType('-1', '-1', bagList[i]);
      }
   }

   Orion.Print('Moving empty bags...');
   while (bagList.length > 0) {
      Orion.MoveItem(bagList[0], 0, 'bagsContainer');
      Orion.Wait('moveitemdelay');
      bagList = Orion.FindType(bags, '-1', lootBarrel.Serial());
   }

   Orion.Print('Moving reagents...');
   var reagentsList = Orion.FindType(regs, '-1', lootBarrel.Serial())
   while (reagentsList.length > 0) {
      Orion.MoveItem(reagentsList[0], 0, 'reagentsContainer');
      Orion.Wait('moveitemdelay');
      reagentsList = Orion.FindType(regs, '-1', lootBarrel.Serial());
   }  

   Orion.Print('Moving first circle scrolls');
   var firstCircleScrollsList = Orion.FindList('firstCircleScrolls', lootBarrel.Serial())
   while (firstCircleScrollsList.length > 0) {
      Orion.MoveItem(firstCircleScrollsList[0], 0, 'firstCircleScrollsContainer');
      Orion.Wait('moveitemdelay');
      firstCircleScrollsList = Orion.FindList('firstCircleScrolls', lootBarrel.Serial());
   }
   
   Orion.Print('Moving second circle scrolls');
   var secondCircleScrollsList = Orion.FindList('secondCircleScrolls', lootBarrel.Serial())
   while (secondCircleScrollsList.length > 0) {
      Orion.MoveItem(secondCircleScrollsList[0], 0, 'secondCircleScrollsContainer');
      Orion.Wait('moveitemdelay');
      secondCircleScrollsList = Orion.FindList('secondCircleScrolls', lootBarrel.Serial());
   }
   
   Orion.Print('Moving third circle scrolls');
   var thirdCircleScrollsList = Orion.FindList('thirdCircleScrolls', lootBarrel.Serial())
   while (thirdCircleScrollsList.length > 0) {
      Orion.MoveItem(thirdCircleScrollsList[0], 0, 'thirdCircleScrollsContainer');
      Orion.Wait('moveitemdelay');
      thirdCircleScrollsList = Orion.FindList('thirdCircleScrolls', lootBarrel.Serial());
   }
   
   Orion.Print('Moving fourth circle scrolls');
   var fourthCircleScrollsList = Orion.FindList('fourthCircleScrolls', lootBarrel.Serial())
   while (fourthCircleScrollsList.length > 0) {
      Orion.MoveItem(fourthCircleScrollsList[0], 0, 'fourthCircleScrollsContainer');
      Orion.Wait('moveitemdelay');
      fourthCircleScrollsList = Orion.FindList('fourthCircleScrolls', lootBarrel.Serial());
   }
   
   Orion.Print('Moving fifth circle scrolls');
   var fifthCircleScrollsList = Orion.FindList('fifthCircleScrolls', lootBarrel.Serial())
   while (fifthCircleScrollsList.length > 0) {
      Orion.MoveItem(fifthCircleScrollsList[0], 0, 'fifthCircleScrollsContainer');
      Orion.Wait('moveitemdelay');
      fifthCircleScrollsList = Orion.FindList('fifthCircleScrolls', lootBarrel.Serial());
   }
   
   Orion.Print('Moving sixth circle scrolls');
   var sixthCircleScrollsList = Orion.FindList('sixthCircleScrolls', lootBarrel.Serial())
   while (sixthCircleScrollsList.length > 0) {
      Orion.MoveItem(sixthCircleScrollsList[0], 0, 'sixthCircleScrollsContainer');
      Orion.Wait('moveitemdelay');
      sixthCircleScrollsList = Orion.FindList('sixthCircleScrolls', lootBarrel.Serial());
   }
   
   Orion.Print('Moving seventh circle scrolls');
   var seventhCircleScrollsList = Orion.FindList('seventhCircleScrolls', lootBarrel.Serial())
   while (seventhCircleScrollsList.length > 0) {
      Orion.MoveItem(seventhCircleScrollsList[0], 0, 'seventhCircleScrollsContainer');
      Orion.Wait('moveitemdelay');
      seventhCircleScrollsList = Orion.FindList('seventhCircleScrolls', lootBarrel.Serial());
   }
   
   Orion.Print('Moving eigth circle scrolls');   
   var eigthCircleScrollsList = Orion.FindList('eigthCircleScrolls', lootBarrel.Serial())
   while (eigthCircleScrollsList.length > 0) {
      Orion.MoveItem(eigthCircleScrollsList[0], 0, 'eigthCircleScrollsContainer');
      Orion.Wait('moveitemdelay');
      eigthCircleScrollsList = Orion.FindList('eigthCircleScrolls', lootBarrel.Serial());
   }
   
   Orion.Print('Moving power scrolls');
   var powerScrollsList = Orion.FindType('0x1F31', '0x084D', lootBarrel.Serial())
   while (powerScrollsList.length > 0) {
      Orion.MoveItem(powerScrollsList[0], 0, 'powerScrollsContainer');
      Orion.Wait('moveitemdelay');
      powerScrollsList = Orion.FindType('0x1F31', '0x084D', lootBarrel.Serial());
   }
   
   Orion.Print('Moving weapons');
   var weapons = '0x0F49|0x0F4D|0x0F47|0x13B1|0x0F4F|0x0F45|0x143E|0x143F|0x13FE|0x1400|0x13FA|0x0E88|0x13B9|0x13B5|0x13AF|0x1404|0x1438|0x1406|0x0231|0x0F62|0x0E87|0x0F60|0x0F5D|0x0F4E'
   var weaponsList = Orion.FindType(weapons, -1, lootBarrel.Serial());

   while (weaponsList.length > 0) {
	
	var weapon = Orion.FindObject(weaponsList[0]);
	
	if (weapon.Color() === '0x0A37'){
         Orion.MoveItem(weaponsList[0], 0, 'ruinWeaponsContainer');
         Orion.Wait('moveitemdelay');
	} else if (weapon.Color() === '0x0123'){
         Orion.MoveItem(weaponsList[0], 0, 'mightWeaponsContainer');
         Orion.Wait('moveitemdelay');
	} else if (weapon.Color() === '0x0030'){
         Orion.MoveItem(weaponsList[0], 0, 'forceWeaponsContainer');
         Orion.Wait('moveitemdelay');
	} else if (weapon.Color() === '0x0272'){
         Orion.MoveItem(weaponsList[0], 0, 'powerWeaponsContainer');
         Orion.Wait('moveitemdelay');
	} else if (weapon.Color() === '0x0A20'){
         Orion.MoveItem(weaponsList[0], 0, 'vanquishWeaponsContainer');
         Orion.Wait('moveitemdelay');
	} else if (weapon.Color() === '0x0021'){
         Orion.MoveItem(weaponsList[0], 0, 'silverWeaponsContainer');
         Orion.Wait('moveitemdelay');
	} else if (weapon.Color() === '0x0231'){
         Orion.MoveItem(weaponsList[0], 0, 'bloodWeaponsContainer');
         Orion.Wait('moveitemdelay');
	} else {
	 Orion.Ignore(weapon.Serial())
	}

      weaponsList = Orion.FindType(weapons, -1, lootBarrel.Serial());
   }
   
   Orion.Print('Moving maps');
   var maps = '0x14EB';
   var mapsList = Orion.FindType(maps, -1, lootBarrel.Serial());

   while (mapsList.length > 0) {
	
	var map = Orion.FindObject(mapsList[0]);
	Orion.Click(map.Serial());
	Orion.WaitJournal('treasure map', Orion.Now(), Orion.Now() + 2000);
	
	if (map.Name().slice(-1) === '1' ){ 
         Orion.MoveItem(map.Serial(), 0, 'level1MapsContainer');
         Orion.Wait('moveitemdelay');
	} else if (map.Name().slice(-1) === '2' ){
         Orion.MoveItem(map.Serial(), 0, 'level2MapsContainer');
         Orion.Wait('moveitemdelay');
	} else if (map.Name().slice(-1) === '3' ){
         Orion.MoveItem(map.Serial(), 0, 'level3MapsContainer');
         Orion.Wait('moveitemdelay');
	} else if (map.Name().slice(-1) === '4' ){
         Orion.MoveItem(map.Serial(), 0, 'level4MapsContainer');
         Orion.Wait('moveitemdelay');
	} else if (map.Name().slice(-1) === '5' ){
         Orion.MoveItem(map.Serial(), 0, 'level5MapsContainer');
         Orion.Wait('moveitemdelay');
	} else {
	 Orion.Ignore(map.Serial())
	}

      mapsList = Orion.FindType(maps, -1, lootBarrel.Serial());;
   }

}

function toggleAutoBandage(){
   if (Orion.ScriptRunning('autoBandage')) {
      Orion.Terminate('autoBandage');
      Orion.Print('Auto Bandage disabled.');
  } else {
      Orion.Exec('autoBandage');
      Orion.Print('Auto Bandage enabled.');
  }
}

function autoBandage(){ 
     while (Orion.Connected() && !Player.Dead()){
        if (Player.Hits() < Player.MaxHits()) {
           Orion.BandageTarget(self);
           Orion.WaitJournal('healed', Orion.Now(), Orion.Now() + 5000);
           Orion.Wait(4000)
        }
        Orion.Wait(100);
     }
     
}

function toggleAutoLoot() {
   if (Orion.ScriptRunning('autoLoot')) {
      Orion.Terminate('autoLoot');
      Orion.Print('Auto Loot disabled.');
  } else {
      Orion.Exec('autoLoot');
      Orion.Print('Auto Loot enabled.');
  }
}

function autoLoot(){

   Orion.IgnoreReset();

   while(Orion.Connected() && !Player.Dead()){
	
	var corpseList = Orion.FindType('0x2006|0x0ECA|0x0E40', '-1', ground, 'fast', '2');

	if (corpseList.length) {
         lootCorpse(corpseList[0]);
	}
	
      Orion.Wait(50);
   }
}

function loot(){

   Orion.Print('Select the container to loot.');
   Orion.AddObject('LOOT_CONTAINER');
   
   while (Orion.HaveTarget()) {
      Orion.Wait(10)
   }
   
   lootCorpse('LOOT_CONTAINER');

}

function lootCorpse(corpseSerial) {

   var corpse = Orion.FindObject(corpseSerial);

   if (corpse == null) {
      Orion.Ignore(corpseSerial, false);
      return;
   } else {
      checkLootPack();
      Orion.UseObject(corpseSerial);
      Orion.UseIgnoreList('lootIgnore');
      var timer = Orion.Now() + 300;
      while (!Orion.FindType('-1', '-1', corpseSerial).length && timer > Orion.Now())
         Orion.Wait(50);

      var itemsList = Orion.FindType('-1', '-1', corpseSerial);
      var sortedItemsList = itemsList.sort(priorityComparator);
	
      while (LootItems(corpseSerial, Orion.FindType('-1', '-1', corpseSerial).sort(priorityComparator)))
	   Orion.Wait(50);

      Orion.Ignore(corpseSerial);
      Orion.ResetIgnoreList();
   }

}

function checkLootPack() {
   var bag = '0x0E76';

   var lootBagList = Orion.FindType(bag);

   if (lootBagList.length)
      Orion.AddObject('lootpack', lootBagList[0]);
   else
      Orion.AddObject('lootpack', Orion.GetSerial(backpack));
}

function LootItems(corpseSerial, list) {
	if (!list.length)
		return false;

	for (var i = 0; i < list.length; i++) {
		if (Orion.GetDistance(corpseSerial) > 2)
			return false;
            var object = Orion.FindObject(list[i]);
	      if (object != null){
                if (object.Graphic() == '0x0E76' || object.Graphic() == '0x0E40') {
		        Orion.MoveItem(list[i], 0, 'backpack');
		    } else {
		        Orion.MoveItem(list[i], 0, 'lootpack');
		    } 
		}
		Orion.Wait(1000);
	}

	return true;
}

function MakeFS(){
   while (true){
      Orion.UseType('0x0E34');
      Orion.WaitMenu('Spell Circles', 'Seventh Circle');
      Orion.WaitMenu('Spell Circle 7', 'Flamestrike');
      Orion.Wait(3000)
      while(Player.Mana() < Player.MaxMana()){
         Orion.UseSkill('Meditation');
         Orion.Wait(1000);
      }
   }

}

function openDoor() {
   var porta= Orion.FindType('0x3EB2|0x3EB1|0x0675|0x0677|0x0679|0x067B|0x067D|0x067F|0x0681|0x0683|0x0685|0x0687|0x0689|0x068B|0x068D|0x068F|0x0691|0x0693|0x0695|0x0697|0x0699|0x069B|0x069D|0x069F|0x06A1|0x06A3|0x06A5|0x06A7|0x06A9|0x06AB|0x06AD|0x06AF|0x06B1|0x06B3|0x06B5|0x06B7|0x06B9|0x06BB|0x06BD|0x06BF|0x06C1|0x06C3|0x06C5|0x06C7|0x06C9|0x06CB|0x06CD|0x06CF|0x06D1|0x06D3|0x06D5|0x06D7|0x06D9|0x06DB|0x06DD|0x06DF|0x06E1|0x06E3|0x06E5|0x06E7|0x06E9|0x06EB|0x06ED|0x06EF|0x06F1|0x06F3|0x06F5|0x0824|0x0826|0x0828|0x082A|0x082C|0x082E|0x0830|0x0832|0x0839|0x083B|0x083D|0x083F|0x0841|0x0843|0x0845|0x0847|0x084C|0x084E|0x0850|0x0852|0x0854|0x0856|0x0858|0x085A|0x0866|0x0868|0x086A|0x086C|0x086E|0x0870|0x0872|0x0874|0x1FED|0x1FEF|0x1FF1|0x1FF3|0x1FF5|0x1FF7|0x1FF9|0x1FFB|0x00E8|0x00EA|0x00EC|0x00EE|0x00F0|0x00F2|0x00F4|0x00F6|0x0314|0x0316|0x0318|0x031A|0x031C|0x031E|0x0320|0x0322|0x0324|0x0326|0x0328|0x032A|0x032C|0x032E|0x0330|0x0332|0x0334|0x0336|0x0338|0x033A|0x033C|0x033E|0x0340|0x0342|0x0344|0x0346|0x0348|0x034A|0x034C|0x034E|0x0350|0x0352|0x0354|0x0356|0x0358|0x035A|0x035C|0x035E|0x0360|0x0362','-1',ground,'',1);
   if(porta.length) {
      var quantity = porta.length;
      for (i = 0; i < quantity; i++) { 
        Orion.UseObject(porta[i]);
        Orion.Wait(30);
      }
   }
   Orion.SetGlobal('globalPortas','0')
}

function closeDoor() {
   var porta =Orion.FindType('0x3ED5|0x3ED4|0x0676|0x0678|0x067A|0x067C|0x067E|0x0680|0x0682|0x0684|0x0686|0x0688|0x068A|0x068C|0x068E|0x0690|0x0692|0x0694|0x0696|0x0698|0x069A|0x069C|0x069E|0x06A0|0x06A2|0x06A4|0x06A6|0x06A8|0x06AA|0x06AC|0x06AE|0x06B0|0x06B2|0x06B4|0x06B6|0x06B8|0x06BA|0x06BC|0x06BE|0x06C0|0x06C2|0x06C4|0x06C6|0x06C8|0x06CA|0x06CC|0x06CE|0x06D0|0x06D2|0x06D4|0x06D6|0x06D8|0x06DA|0x06DC|0x06DE|0x06E0|0x06E2|0x06E4|0x06E6|0x06E8|0x06EA|0x06EC|0x06EE|0x06F0|0x06F2|0x06F4|0x06F6|0x0825|0x0827|0x0829|0x082A|0x082C|0x082E|0x0831|0x0833|0x083A|0x083C|0x083E|0x0840|0x0842|0x0844|0x0846|0x0848|0x084D|0x084F|0x0851|0x0853|0x0855|0x0857|0x0859|0x085B|0x0867|0x0869|0x086B|0x086D|0x086F|0x0871|0x0873|0x0875|0x1FEE|0x1FF0|0x1FF2|0x1FF4|0x1FF6|0x1FF8|0x1FFA|0x1FFC|0x00E9|0x00EB|0x00ED|0x00EF|0x00F1|0x00F3|0x00F5|0x00F7|0x0315|0x0317|0x0319|0x031B|0x031D|0x031F|0x0321|0x0323|0x0325|0x0327|0x0329|0x032B|0x032D|0x032F|0x0331|0x0333|0x0335|0x0337|0x0339|0x033B|0x033D|0x033F|0x0341|0x0343|0x0345|0x0347|0x0349|0x034B|0x034D|0x034F|0x0351|0x0353|0x0355|0x0357|0x0359|0x035B|0x035D|0x035F|0x0361|0x0363','-1',ground,'',2);
   if(porta!= null && porta.length) {
      var quantity = porta.length ;
      for (i = 0; i < quantity; i++) {
         Orion.UseObject(porta[i]);
         Orion.Wait(30);
      }
   }
   Orion.SetGlobal('globalPortas','1')
}

function doorAuto() {
   var portaFechada= Orion.FindType('0x3EB2|0x3EB1|0x0675|0x0677|0x0679|0x067B|0x067D|0x067F|0x0681|0x0683|0x0685|0x0687|0x0689|0x068B|0x068D|0x068F|0x0691|0x0693|0x0695|0x0697|0x0699|0x069B|0x069D|0x069F|0x06A1|0x06A3|0x06A5|0x06A7|0x06A9|0x06AB|0x06AD|0x06AF|0x06B1|0x06B3|0x06B5|0x06B7|0x06B9|0x06BB|0x06BD|0x06BF|0x06C1|0x06C3|0x06C5|0x06C7|0x06C9|0x06CB|0x06CD|0x06CF|0x06D1|0x06D3|0x06D5|0x06D7|0x06D9|0x06DB|0x06DD|0x06DF|0x06E1|0x06E3|0x06E5|0x06E7|0x06E9|0x06EB|0x06ED|0x06EF|0x06F1|0x06F3|0x06F5|0x0824|0x0826|0x0828|0x082A|0x082C|0x082E|0x0830|0x0832|0x0839|0x083B|0x083D|0x083F|0x0841|0x0843|0x0845|0x0847|0x084C|0x084E|0x0850|0x0852|0x0854|0x0856|0x0858|0x085A|0x0866|0x0868|0x086A|0x086C|0x086E|0x0870|0x0872|0x0874|0x1FED|0x1FEF|0x1FF1|0x1FF3|0x1FF5|0x1FF7|0x1FF9|0x1FFB|0x00E8|0x00EA|0x00EC|0x00EE|0x00F0|0x00F2|0x00F4|0x00F6|0x0314|0x0316|0x0318|0x031A|0x031C|0x031E|0x0320|0x0322|0x0324|0x0326|0x0328|0x032A|0x032C|0x032E|0x0330|0x0332|0x0334|0x0336|0x0338|0x033A|0x033C|0x033E|0x0340|0x0342|0x0344|0x0346|0x0348|0x034A|0x034C|0x034E|0x0350|0x0352|0x0354|0x0356|0x0358|0x035A|0x035C|0x035E|0x0360|0x0362','-1',ground,'',2);
   var portaAberta =Orion.FindType('0x3ED5|0x3ED4|0x0676|0x0678|0x067A|0x067C|0x067E|0x0680|0x0682|0x0684|0x0686|0x0688|0x068A|0x068C|0x068E|0x0690|0x0692|0x0694|0x0696|0x0698|0x069A|0x069C|0x069E|0x06A0|0x06A2|0x06A4|0x06A6|0x06A8|0x06AA|0x06AC|0x06AE|0x06B0|0x06B2|0x06B4|0x06B6|0x06B8|0x06BA|0x06BC|0x06BE|0x06C0|0x06C2|0x06C4|0x06C6|0x06C8|0x06CA|0x06CC|0x06CE|0x06D0|0x06D2|0x06D4|0x06D6|0x06D8|0x06DA|0x06DC|0x06DE|0x06E0|0x06E2|0x06E4|0x06E6|0x06E8|0x06EA|0x06EC|0x06EE|0x06F0|0x06F2|0x06F4|0x06F6|0x0825|0x0827|0x0829|0x082A|0x082C|0x082E|0x0831|0x0833|0x083A|0x083C|0x083E|0x0840|0x0842|0x0844|0x0846|0x0848|0x084D|0x084F|0x0851|0x0853|0x0855|0x0857|0x0859|0x085B|0x0867|0x0869|0x086B|0x086D|0x086F|0x0871|0x0873|0x0875|0x1FEE|0x1FF0|0x1FF2|0x1FF4|0x1FF6|0x1FF8|0x1FFA|0x1FFC|0x00E9|0x00EB|0x00ED|0x00EF|0x00F1|0x00F3|0x00F5|0x00F7|0x0315|0x0317|0x0319|0x031B|0x031D|0x031F|0x0321|0x0323|0x0325|0x0327|0x0329|0x032B|0x032D|0x032F|0x0331|0x0333|0x0335|0x0337|0x0339|0x033B|0x033D|0x033F|0x0341|0x0343|0x0345|0x0347|0x0349|0x034B|0x034D|0x034F|0x0351|0x0353|0x0355|0x0357|0x0359|0x035B|0x035D|0x035F|0x0361|0x0363','-1',ground,'',3);

   if (portaAberta.length > 0) {
      var porta = portaAberta;
   } else {
      var porta = portaFechada;
   }
   
   if(porta.length) {
      var quantity = porta.length;
      for (i = 0; i < quantity; i++) {
         Orion.UseObject(porta[i]);
         Orion.Wait(30);
     }
   }
}

function toggleAutoTame(){

   if (Orion.ScriptRunning('follow') || Orion.ScriptRunning('tame')) {
      Orion.Terminate('follow');
      Orion.Terminate('tame');
      Orion.Print('Auto Tame disabled.');
      return;
   } 

   Orion.Print('Select the animal.')
   Orion.AddObject('animal')
   
   while (Orion.HaveTarget()) {
      Orion.Wait(10)
   }

   var animal = Orion.FindObject('animal');
   if(animal == null)
   {
      Orion.Print('-1', 'Failed/Cancelled to setup an animal');
      return;
   }
  
   Orion.Exec('follow', true, animal.Serial());
   Orion.Exec('tame', true, animal.Serial());
   Orion.Print('Auto Tame enabled.');
}


function follow(serialAnimal){
   Orion.WarMode(false);
   var animal;
   while ((animal = Orion.FindObject(serialAnimal)) != null && !Player.WarMode()) {
      Orion.WalkTo(animal.X(), animal.Y(), animal.Z());
      Orion.Wait(200);
   }
}

function tame(serialAnimal){
   Orion.WarMode(false);
   Orion.ClearJournal();

   while (!Player.Dead() && !Orion.InJournal('mestre|belong|tamed') && !Player.WarMode()) {
      Orion.ClearJournal();
      Orion.UseType('0x0EB2')
      Orion.WaitTargetObject(serialAnimal)
      Orion.WaitJournal('mestre|tamed|falhou|perdeu|belong|far', Orion.Now(), Orion.Now() + 12000);
   }
   
   var shrinkPotion = Orion.FindType('0x0F0E', '0x0076', 'backpack');
   if (shrinkPotion != null){
      Orion.UseObject(shrinkPotion);
      Orion.WaitTargetObject(serialAnimal);
   }

}

function organizeMaps() {
   Orion.Print('Select the map bag.')
   Orion.AddObject('mapSortingBag')
   
   while (Orion.HaveTarget()) {
      Orion.Wait(10)
   }
    
   var mapBag = Orion.FindObject('mapSortingBag');
   var mapsList = Orion.FindType('0x14EB', -1, 'backpack');

   for (var i = 0; i < mapsList.length; i++) {
   
   	var map = Orion.FindObject(mapsList[i]);
   	
   	var coordString = null;
      
      while (coordString === null) {
         var startTime = Orion.Now();
         Orion.ClearJournal();
         Orion.UseObject(map.Serial());
         coordString = Orion.WaitJournal('coordenadas', startTime, Orion.Now() + 1000);
      }

      var mensagem = coordString.Text();
      var mensagem = mensagem.slice(mensagem.indexOf(':') + 2, mensagem.length -1)
      var x = mensagem.slice(0, mensagem.indexOf(','));
      
      if(mensagem.indexOf(',') === mensagem.lastIndexOf(',')){
         var y = mensagem.slice(mensagem.indexOf(',') + 1, mensagem.length);
      } else {
         var y = mensagem.slice(mensagem.indexOf(',') + 1, mensagem.lastIndexOf(','));
      }
      
      

      Orion.Print('(' + x + ', ' + y + ')')

      x = (x*64)/5120;
      y = (y*56)/4095;
      Orion.Print('(' + x + ', ' + y + ')')
    
      x += 29;
      y += 34;
    
      x = parseInt(x);
      y = parseInt(y);  
      Orion.Print('(' + x + ', ' + y + ')')
      Orion.MoveItem(map.Serial(), 0, 'mapSortingBag', x, y);
      Orion.Wait('moveitemdelay');
      
   }
   
   
}

